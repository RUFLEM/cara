{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./src/@lekoarts/gatsby-theme-cara/components/PF/lightsout/Cell.js","webpack:///./src/@lekoarts/gatsby-theme-cara/components/PF/lightsout/Board.js","webpack:///./src/pages/lightsout.js"],"names":["_assertThisInitialized","self","ReferenceError","Cell","props","handleClick","bind","evt","this","flipCellsAroundMe","render","classes","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","flipCellsAround","coord","split","map","Number","flipCell","every","cell","setState","makeTable","tblBoard","key","defaultProps","LightsOut","href"],"mappings":"4FAAe,SAASA,EAAuBC,GAC7C,QAAa,IAATA,EACF,MAAM,IAAIC,eAAe,6DAG3B,OAAOD,EALT,mC,6JCsCeE,E,YApBb,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,4CAKnBD,YAAA,SAAYE,GAEVC,KAAKJ,MAAMK,qB,EAGbC,OAAA,WACE,IAAIC,EAAU,QAAUH,KAAKJ,MAAMQ,MAAQ,YAAc,IAEzD,OACI,kBAAIC,UAAWF,EAASG,QAASN,KAAKH,e,GAf3BU,aCabC,G,sBAMJ,WAAYZ,GAAQ,IAAD,SACjB,cAAMA,IAAN,MAGKa,MAAQ,CACXC,QAAQ,EACRC,MAAO,EAAKC,eANG,E,4CAYnBA,YAAA,WAGE,IAFA,IAAID,EAAQ,GAEHE,EAAI,EAAGA,EAAIb,KAAKJ,MAAMkB,MAAOD,IAAK,CAEzC,IADA,IAAIE,EAAM,GACDC,EAAI,EAAGA,EAAIhB,KAAKJ,MAAMqB,MAAOD,IACpCD,EAAIG,KAAKC,KAAKC,SAAWpB,KAAKJ,MAAMyB,qBAEtCV,EAAMO,KAAKH,GAEb,OAAOJ,G,EAKTW,gBAAA,SAAgBC,GAAQ,IAAD,EACEvB,KAAKJ,MAAtBqB,EADe,EACfA,MAAOH,EADQ,EACRA,MACTH,EAAQX,KAAKS,MAAME,MAFF,EAGRY,EAAMC,MAAM,KAAKC,IAAIC,QAA7Bb,EAHgB,KAGbG,EAHa,KAKrB,SAASW,EAASd,EAAGG,GAGfA,GAAK,GAAKA,EAAIC,GAASJ,GAAK,GAAKA,EAAIC,IACvCH,EAAME,GAAGG,IAAML,EAAME,GAAGG,IAI5BW,EAASd,EAAGG,GACZW,EAASd,EAAGG,EAAI,GAChBW,EAASd,EAAGG,EAAI,GAChBW,EAASd,EAAI,EAAGG,GAChBW,EAASd,EAAI,EAAGG,GAIhB,IAAIN,EAASC,EAAMiB,OAAM,SAAAb,GAAG,OAAIA,EAAIa,OAAM,SAAAC,GAAI,OAAKA,QAEnD7B,KAAK8B,SAAS,CAAEnB,MAAOA,EAAOD,OAAQA,K,EAIxCqB,UAAA,WAEE,IAFW,IAAD,OACNC,EAAW,GACNnB,EAAI,EAAGA,EAAIb,KAAKJ,MAAMkB,MAAOD,IAAK,CAEzC,IADA,IAAIE,EAAM,GAD+B,WAEhCC,GACP,IAAIO,EAAWV,EAAN,IAAWG,EACpBD,EAAIG,KACF,YAAC,EAAD,CACEe,IAAKV,EACLnB,MAAO,EAAKK,MAAME,MAAME,GAAGG,GAC3Bf,kBAAmB,kBAAM,EAAKqB,gBAAgBC,QAN3CP,EAAI,EAAGA,EAAIhB,KAAKJ,MAAMqB,MAAOD,IAAM,EAAnCA,GAUTgB,EAASd,KAAK,kBAAIe,IAAKpB,GAAIE,IAE7B,OACE,qBAAOV,UAAU,SACf,yBAAQ2B,K,EAId9B,OAAA,WACE,OACE,uBACGF,KAAKS,MAAMC,OACV,mBAAKL,UAAU,UACb,oBAAMA,UAAU,eAAhB,OACA,oBAAMA,UAAU,aAAhB,SAGF,uBACE,mBAAKA,UAAU,eACb,mBAAKA,UAAU,eAAf,UACA,mBAAKA,UAAU,aAAf,QAEDL,KAAK+B,e,GAhGExB,cAAdC,EACG0B,aAAe,CACpBpB,MAAO,EACPG,MAAO,EACPI,oBAAqB,KAoGVb,QCjIA,SAAS2B,IACpB,OACI,uBACI,mBAAK9B,UAAU,aACf,YAAC,EAAD,OAEA,iBAAG+B,KAAK,YAAR,e","file":"component---src-pages-lightsout-js-ad2ced83cc9412baf731.js","sourcesContent":["export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x); //Flip initial cell\n    flipCell(y, x - 1); //flip left\n    flipCell(y, x + 1); //flip right\n    flipCell(y - 1, x); //flip below\n    flipCell(y + 1, x); //flip above\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({ board: board, hasWon: hasWon });\n  }\n\n  /** Render game board or winning message. */\n  makeTable() {\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return (\n      <table className='Board'>\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n  }\n  render() {\n    return (\n      <div>\n        {this.state.hasWon ? (\n          <div className='winner'>\n            <span className='neon-orange'>YOU</span>\n            <span className='neon-blue'>WIN!</span>\n          </div>\n        ) : (\n          <div>\n            <div className='Board-title'>\n              <div className='neon-orange'>Lights</div>\n              <div className='neon-blue'>Out</div>\n            </div>\n            {this.makeTable()}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\"\nimport \"../@lekoarts/gatsby-theme-cara/components/PF/lightsout/lightsout.css\"\nimport Board from \"../@lekoarts/gatsby-theme-cara/components/PF/lightsout/Board\"\n\n\nexport default function LightsOut() {\n    return (\n        <div>\n            <div className=\"lightsout\">\n            <Board></Board>\n            </div>\n            <a href=\"/project\">Projects</a>\n        </div>\n    );\n}"],"sourceRoot":""}